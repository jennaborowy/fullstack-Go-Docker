// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\item_repository.go
//
// Generated by this command:
//
//	mockgen -source .\repository\item_repository.go -destination .\mocks\mock_item_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/jennaborowy/fullstack-Go-Docker/models"
	gomock "go.uber.org/mock/gomock"
)

// MockItemRepositoryInterface is a mock of ItemRepositoryInterface interface.
type MockItemRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockItemRepositoryInterfaceMockRecorder is the mock recorder for MockItemRepositoryInterface.
type MockItemRepositoryInterfaceMockRecorder struct {
	mock *MockItemRepositoryInterface
}

// NewMockItemRepositoryInterface creates a new mock instance.
func NewMockItemRepositoryInterface(ctrl *gomock.Controller) *MockItemRepositoryInterface {
	mock := &MockItemRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepositoryInterface) EXPECT() *MockItemRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemRepositoryInterface) CreateItem(title string, date time.Time, content string, listID int) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", title, date, content, listID)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemRepositoryInterfaceMockRecorder) CreateItem(title, date, content, listID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemRepositoryInterface)(nil).CreateItem), title, date, content, listID)
}

// DeleteItemByID mocks base method.
func (m *MockItemRepositoryInterface) DeleteItemByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItemByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItemByID indicates an expected call of DeleteItemByID.
func (mr *MockItemRepositoryInterfaceMockRecorder) DeleteItemByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItemByID", reflect.TypeOf((*MockItemRepositoryInterface)(nil).DeleteItemByID), id)
}

// GetAll mocks base method.
func (m *MockItemRepositoryInterface) GetAll() ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockItemRepositoryInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockItemRepositoryInterface)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockItemRepositoryInterface) GetByID(id int) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockItemRepositoryInterfaceMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockItemRepositoryInterface)(nil).GetByID), id)
}

// UpdateItem mocks base method.
func (m *MockItemRepositoryInterface) UpdateItem(id int, title string, date time.Time, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", id, title, date, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemRepositoryInterfaceMockRecorder) UpdateItem(id, title, date, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemRepositoryInterface)(nil).UpdateItem), id, title, date, content)
}
