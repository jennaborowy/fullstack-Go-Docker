// Code generated by MockGen. DO NOT EDIT.
// Source: .\repository\list_repository.go
//
// Generated by this command:
//
//	mockgen -source .\repository\list_repository.go -destination .\mocks\mock_list_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/jennaborowy/fullstack-Go-Docker/models"
	gomock "go.uber.org/mock/gomock"
)

// MockListRepositoryInterface is a mock of ListRepositoryInterface interface.
type MockListRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockListRepositoryInterfaceMockRecorder is the mock recorder for MockListRepositoryInterface.
type MockListRepositoryInterfaceMockRecorder struct {
	mock *MockListRepositoryInterface
}

// NewMockListRepositoryInterface creates a new mock instance.
func NewMockListRepositoryInterface(ctrl *gomock.Controller) *MockListRepositoryInterface {
	mock := &MockListRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockListRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListRepositoryInterface) EXPECT() *MockListRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateList mocks base method.
func (m *MockListRepositoryInterface) CreateList(title string) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", title)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockListRepositoryInterfaceMockRecorder) CreateList(title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockListRepositoryInterface)(nil).CreateList), title)
}

// DeleteList mocks base method.
func (m *MockListRepositoryInterface) DeleteList(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteList", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteList indicates an expected call of DeleteList.
func (mr *MockListRepositoryInterfaceMockRecorder) DeleteList(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteList", reflect.TypeOf((*MockListRepositoryInterface)(nil).DeleteList), id)
}

// GetAllLists mocks base method.
func (m *MockListRepositoryInterface) GetAllLists() ([]models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLists")
	ret0, _ := ret[0].([]models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLists indicates an expected call of GetAllLists.
func (mr *MockListRepositoryInterfaceMockRecorder) GetAllLists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLists", reflect.TypeOf((*MockListRepositoryInterface)(nil).GetAllLists))
}

// GetList mocks base method.
func (m *MockListRepositoryInterface) GetList(id int) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", id)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockListRepositoryInterfaceMockRecorder) GetList(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockListRepositoryInterface)(nil).GetList), id)
}

// UpdateTitle mocks base method.
func (m *MockListRepositoryInterface) UpdateTitle(id int, title string) (*models.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTitle", id, title)
	ret0, _ := ret[0].(*models.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTitle indicates an expected call of UpdateTitle.
func (mr *MockListRepositoryInterfaceMockRecorder) UpdateTitle(id, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTitle", reflect.TypeOf((*MockListRepositoryInterface)(nil).UpdateTitle), id, title)
}
